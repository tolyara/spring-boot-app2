package com.springboot.app2.wiki;

/**
 *
 * https://highload.today/sharding-i-replikatsiya/
 *
 * В основе масштабирования данных лежит тот же принцип, что и в основе масштабирования Web приложений.
 * Это разделение данных на группы и выделение их на отдельные сервера. Существует две основные стратегии — репликация и шардинг.
 *
 * ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 * РЕПЛИКАЦИЯ
 * ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 *
 * Репликация позволяет создать полный дубликат базы данных. Так, вместо одного сервера у Вас их будет несколько.
 * Чаще всего используют схему master-slave
 *
 * Master — это основной сервер БД, куда поступают все данные. Все изменения в данных (добавление, обновление, удаление) должны происходить на этом сервере.
 * Slave — это вспомогательный сервер БД, который копирует все данные с мастера. С этого сервера следует читать данные. Таких серверов может быть несколько.
 *
 * Репликация позволяет использовать два или больше одинаковых серверов вместо одного.
 * Операций чтения (SELECT) данных часто намного больше, чем операций изменения данных (INSERT/UPDATE).
 * Поэтому, репликация позволяет разгрузить основной сервер за счет переноса операций чтения на слейв.
 *
 * В приложении у Вас будет два соединения с базой данных. Одно — для мастера и одно для слейва.
 * Но также репликация обычно поддерживается самой СУБД (например, MySQL) и настраивается независимо от приложения.
 *
 * Следует отметить, что репликация сама по себе не очень удобный механизм масштабирования.
 * Причиной тому — рассинхронизация данных и задержки в копировании с мастера на слейв.
 * Зато это отличное средство для обеспечения отказоустойчивости. Вы всегда можете переключиться на слейв, если мастер ломается и наоборот.
 * Чаще всего репликация используется совместно с шардингом именно из соображений надежности.
 *
 * ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 * ШАРДИНГ
 * ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 *
 * Суть шардинга в разделении (партиционирование) базы данных на отдельные части так, чтобы каждую из них можно было вынести на отдельный сервер.
 *
 * Вертикальный шардинг — это выделение таблицы или группы таблиц на отдельный сервер. Например, в приложении есть такие таблицы:
 * users — данные пользователей
 * photos — фотографии пользователей
 * albums — альбомы пользователей
 *
 * Таблицу users Вы оставляете на одном сервере, а таблицы photos и albums переносите на другой.
 * В таком случае в приложении Вам необходимо будет использовать соответствующее соединение для работы с каждой таблицей.
 * В отличие от репликации, мы используем разные соединения для любых операций, но с определенными таблицами.
 *
 * Горизонтальный шардинг — это разделение одной таблицы на разные сервера. Это необходимо использовать для огромных таблиц, которые не умещаются на одном сервере.
 * Разделение таблицы на куски делается по такому принципу:
 * - На нескольких серверах создается одна и та же таблица (только структура, без данных).
 * - В приложении выбирается условие, по которому будет определяться нужное соединение (например, четные на один сервер, а нечетные — на другой).
 * - Перед каждым обращением к таблице происходит выбор нужного соединения.
 *
 * Горизонтальный шардинг — это очень мощный инструмент масштабирования данных. Но в то же время и очень нетривиальный.
 *
 * ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 *
 * Не следует применять технику шардинга ко всем таблицам. Правильный подход — это поэтапный процесс разделения растущих таблиц.
 * Следует задумываться о горизонтальном шардинге, когда количество записей в одной таблице переходит за пределы от нескольких десятков миллионов до сотен миллионов.
 *
 * ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 *
 * Шардинг и репликация часто используются совместно. В нашем примере, мы могли бы использовать по два сервера на каждый шард таблицы:
 * photos_master_1 — мастер первой половины таблицы.
 * photos_slave_1 — слейв первой половины таблицы.
 * photos_master_2 — мастер второй половины таблицы.
 * photos_slave_2 — слейв второй половины таблицы.
 * Такая схема часто используется не для масштабирования, а для обеспечения отказоустойчивости. Так, при выходе из строя одного из серверов шарда, всегда будет запасной.
 *
 * ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 * Помните, процесс масштабирования данных — это архитектурное решение, оно не связано с конкретной технологией.
 * Не делайте ошибок наших отцов — не переезжайте с известной Вам технологии на новую из-за поддержки или не поддержки шардинга.
 * Проблемы обычно связаны с архитектурой, а не конкретной базой данных.
 *
 */
public class ShardingVsReplication {
}
